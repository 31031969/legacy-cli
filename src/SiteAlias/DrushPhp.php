<?php

namespace Platformsh\Cli\SiteAlias;

use Platformsh\Client\Model\Project;

class DrushPhp extends DrushAlias
{
    /**
     * {@inheritdoc}
     */
    protected function getFilename($groupName, $drushDir)
    {
        return $drushDir . '/' . $groupName . '.aliases.drushrc.php';
    }

    /**
     * {@inheritdoc}
     */
    protected function formatComment($comment)
    {
        return preg_replace('/^/m', '// $1', trim($comment));
    }

    /**
     * Format a list of aliases as a string.
     *
     * @param array $aliases
     *   A list of aliases, each an element containing 'alias' and 'comment'.
     *
     * @return string
     */
    protected function formatAliases(array $aliases)
    {
        $formatted = [];
        foreach ($aliases as $aliasName => $newAlias) {
            $formatted[] = $this->formatAlias($newAlias['alias'], $aliasName, isset($newAlias['comment']) ? $newAlias['comment'] : '');
        }

        return implode("\n", $formatted);
    }

    /**
     * Format a single Drush site alias as a string.
     *
     * @param string $name    The alias name (the name of the environment).
     * @param array  $alias   The alias, as an array.
     * @param string $comment A comment to to describe the alias (optional).
     *
     * @return string
     */
    private function formatAlias(array $alias, $name, $comment = '')
    {
        $formatted = sprintf(
            "\$aliases['%s'] = %s;\n",
            str_replace("'", "\\'", $name),
            var_export($alias, true)
        );
        if (!empty($comment)) {
            $formatted = $this->formatComment($comment) .  "\n" . $formatted;
        }

        return $formatted;
    }

    /**
     * {@inheritdoc}
     */
    protected function getExistingAliases(array $filenames)
    {
        // This may create a PHP parse error for invalid syntax in the alias
        // file, but in that case the user could not run Drush anyway.
        $aliases = [];
        foreach ($filenames as $filename) {
            if (file_exists($filename)) {
                include $filename;
            }
        }

        return $aliases;
    }

    /**
     * {@inheritdoc}
     */
    protected function getHeader(Project $project)
    {
        return "<?php\n"
            . "/**\n * @file"
            . "\n * Drush aliases for the " . $this->config->get('service.name') . " project \"{$project->title}\"."
            . "\n *"
            . "\n * This file is auto-generated by the " . $this->config->get('application.name') . "."
            . "\n *"
            . "\n * WARNING"
            . "\n * This file may be regenerated at any time."
            . "\n * - User-defined aliases will be preserved."
            . "\n * - Aliases for active environments (including any custom additions) will be preserved."
            . "\n * - Aliases for deleted or inactive environments will be deleted."
            . "\n * - All other information will be deleted."
            . "\n */\n\n";
    }

    /**
     * Generate new aliases.
     *
     * @param array $apps
     * @param array $environments
     *
     * @return array
     */
    protected function generateNewAliases(array $apps, array $environments)
    {
        $aliases = [];

        foreach ($apps as $app) {
            $appId = $app->getId();

            // Generate aliases for the remote environments.
            foreach ($environments as $environment) {
                $alias = $this->generateRemoteAlias($environment, $app, !$app->isSingle());
                if (!$alias) {
                    continue;
                }

                $aliasName = $environment->id;
                if (count($apps) > 1) {
                    $aliasName .= '--' . $appId;
                }

                $aliases[$aliasName] = [
                    'alias' => $alias,
                    'comment' => sprintf(
                        'Automatically generated alias for the environment "%s", application "%s".',
                        $environment->title,
                        $appId
                    ),
                ];
            }

            // Generate an alias for the local environment.
            $localAliasName = self::LOCAL_ALIAS_NAME;
            if (count($apps) > 1) {
                $localAliasName .= '--' . $appId;
            }
            $aliases[$localAliasName] = $this->generateLocalAlias($app);
        }

        return $aliases;
    }
}
