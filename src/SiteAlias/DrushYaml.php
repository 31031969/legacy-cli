<?php

namespace Platformsh\Cli\SiteAlias;

use Platformsh\Client\Model\Project;
use Symfony\Component\Yaml\Yaml;

class DrushYaml extends DrushAlias
{
    /**
     * Generate new aliases.
     *
     * @param array $apps
     * @param array $environments
     *
     * @return array
     */
    protected function generateNewAliases(array $apps, array $environments)
    {
        $aliases = [];

        foreach ($apps as $app) {
            $appId = $app->getId();

            // Generate an alias for the local environment.
            $aliases[$appId][self::LOCAL_ALIAS_NAME] = $this->generateLocalAlias($app);

            // Generate aliases for the remote environments.
            foreach ($environments as $environment) {
                $alias = $this->generateRemoteAlias($environment, $app);
                if ($alias) {
                    $aliases[$appId][$environment->id] = $alias;
                }
            }
        }

        return $aliases;
    }

    /**
     * {@inheritdoc}
     */
    protected function getFilename($groupName, $drushDir)
    {
        return $drushDir . '/' . $groupName . '.aliases.yml';
    }

    /**
     * {@inheritdoc}
     */
    protected function formatAliases(array $aliases)
    {
        return preg_replace('/^/m', '  ', Yaml::dump($aliases, 5, 2));
    }

    /**
     * {@inheritdoc}
     */
    protected function getExistingAliases(array $groupNames)
    {
        $aliases = parent::getExistingAliases($groupNames);
        if (empty($aliases)) {
            $drushDir = $this->getDrushDir();
            foreach ($groupNames as $groupName) {
                $filename = $this->getFilename($groupName, $drushDir);
                if (file_exists($filename) && ($content = file_get_contents($filename))) {
                    $parsed = (array) Yaml::parse($content);
                    if (empty($parsed['sites'])) {
                        continue;
                    }
                    $aliases = array_merge($aliases, $parsed['sites']);
                }
            }
        }

        return $aliases;
    }

    /**
     * {@inheritdoc}
     */
    protected function getHeader(Project $project)
    {
        return <<<EOT
# Drush aliases for the {$this->config->get('service.name')} project "{$project->title}".
# This file is auto-generated by the {$this->config->get('application.name')}.
#
# WARNING
# This file may be regenerated at any time.
# - User-defined aliases will be preserved.
# - Aliases for active environments (including any custom additions) will be preserved.
# - Aliases for deleted or inactive environments will be deleted.
# - All other information will be deleted.

sites:
EOT;
    }
}
