<?php

namespace Platformsh\Cli\SiteAlias;

use Platformsh\Client\Model\Project;
use Symfony\Component\Yaml\Yaml;

class DrushYaml extends DrushAlias
{
    /**
     * Generate new aliases.
     *
     * @param array $apps
     * @param array $environments
     *
     * @return array
     */
    protected function generateNewAliases(array $apps, array $environments)
    {
        $aliases = [];

        foreach ($apps as $app) {
            $appId = $app->getId();

            // Generate aliases for the remote environments.
            foreach ($environments as $environment) {
                $alias = $this->generateRemoteAlias($environment, $app, !$app->isSingle());
                if (!$alias) {
                    continue;
                }

                $aliasName = $environment->id;

                $aliases[$appId][$aliasName] = [
                    'alias' => $alias,
                    'comment' => sprintf(
                        'Automatically generated alias for the environment "%s", application "%s".',
                        $environment->title,
                        $appId
                    ),
                ];
            }

            // Generate an alias for the local environment.
            $aliases[$appId][self::LOCAL_ALIAS_NAME] = $this->generateLocalAlias($app);
        }

        return $aliases;
    }

    /**
     * {@inheritdoc}
     */
    protected function getFilename($groupName, $drushDir)
    {
        return $drushDir . '/' . $groupName . '.aliases.yml';
    }

    /**
     * {@inheritdoc}
     */
    protected function formatComment($comment)
    {
        return preg_replace('/^/m', '# ', trim($comment));
    }

    /**
     * {@inheritdoc}
     */
    protected function formatAliases(array $aliases)
    {
        $output = '';
        $indent = str_repeat(' ', 4);

        foreach ($aliases as $appName => $environments) {
            $output .= $indent . "'" . str_replace("'", "\\'", $appName) . "':\n";
            foreach ($environments as $environment => $alias) {
                $aliasString = Yaml::dump([
                    $environment => isset($alias['alias']) ? $alias['alias'] : $alias
                ], 5, 4);
                if (!empty($alias['comment'])) {
                    $aliasString = $this->formatComment($alias['comment']) . "\n" . $aliasString;
                }
                $output .= preg_replace('/^/m', $indent . $indent, $aliasString) . "\n";
            }
        }

        return $output;
    }

    /**
     * {@inheritdoc}
     */
    protected function getExistingAliases(array $filenames)
    {
        $aliases = [];
        foreach ($filenames as $filename) {
            if (file_exists($filename) && ($content = file_get_contents($filename))) {
                $parsed = (array) Yaml::parse($content);
                if (empty($parsed['sites'])) {
                    continue;
                }
                $aliases = array_merge($aliases, $parsed['sites']);
            }
        }

        return $aliases;
    }

    /**
     * {@inheritdoc}
     */
    protected function getHeader(Project $project)
    {
        return "# Drush aliases for the " . $this->config->get('service.name') . " project \"{$project->title}\"."
            . "\n#"
            . "\n# This file is auto-generated by the " . $this->config->get('application.name') . "."
            . "\n#"
            . "\n# WARNING"
            . "\n# This file may be regenerated at any time."
            . "\n# - User-defined aliases will be preserved."
            . "\n# - Aliases for active environments (including any custom additions) will be preserved."
            . "\n# - Aliases for deleted or inactive environments will be deleted."
            . "\n# - All other information will be deleted."
            . "\n#\n\n"
            . "sites:\n";
    }
}
